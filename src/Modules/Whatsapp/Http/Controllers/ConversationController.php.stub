<?php

namespace App\Http\Controllers\Resources;

use App\Http\Controllers\Controller;
use App\Http\Requests\Conversation\ConversationStoreRequest;
use App\Http\Requests\Conversation\ConversationUpdateRequest;
use App\Http\Resources\Conversation\ConversationResource;
use App\Models\Conversation;
use App\Services\Conversation\ConversationServiceInterface;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class ConversationController extends Controller
{
  protected ConversationServiceInterface $service;

  public function __construct(ConversationServiceInterface $service)
  {
    $this->service = $service;
  }

  /**
   * Display a listing of the resource.
   *
   * @return \Illuminate\Http\Response
   */
  public function index(Request $request): JsonResponse
  {
    $this->authorize('index', Conversation::class);

    return ConversationResource::collection($this->service->getAllPaginated($request))->response();
  }

  /**
   * Store a newly created resource in storage.
   *
   * @param  \App\Http\Requests\Conversation\ConversationStoreRequest  $request
   * @return \Illuminate\Http\Response
   */
  public function store(ConversationStoreRequest $request): ConversationResource
  {
    $this->authorize('store', Conversation::class);

    return new ConversationResource($this->service->create($request->validated()));
  }

  /**
   * Display the specified resource.
   *
   * @param  \App\Models\Conversation $conversation
   * @return \Illuminate\Http\Response
   */
  public function show(Conversation $conversation): ConversationResource
  {
    $this->authorize('show', $conversation);
    $conversation = $this->service->findOrFail($conversation->id);

    return new ConversationResource($conversation);
  }

  /**
   * Update the specified resource in storage.
   *
   * @param  \App\Http\Requests\Conversation\ConversationUpdateRequest  $request
   * @param  \App\Models\Conversation $conversation
   * @return \Illuminate\Http\Response
   */
  public function update(ConversationUpdateRequest $request, Conversation $conversation): ConversationResource
  {
    $this->authorize('update', $conversation);
    $conversation = $this->service->update($conversation->id, $request->validated());

    return new ConversationResource($conversation);
  }

  /**
   * Remove the specified resource from storage.
   *
   * @param  \App\Models\Conversation  $conversation
   * @return \Illuminate\Http\Response
   */
  public function destroy(Conversation $conversation): JsonResponse
  {
    $this->authorize('destroy', $conversation);
    $this->service->delete($conversation->id);

    return response()->json(null, 204);
  }

  /**
   * Remove multiple resource from storage.
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function destroyMany(Request $request): JsonResponse
  {
    foreach ($request->input('ids') as $id) {
      $conversation = Conversation::find($id);

      if (!$conversation) {
        return response()->json(['errors' => [['code' => 404, 'message' => __('conversations.not_find')]]], 404);
      }
      $this->authorize('destroy', $conversation);
    }

    $this->service->destroy($request->input('ids'));

    return response()->json(null, 204);
  }
}
